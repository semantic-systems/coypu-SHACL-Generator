#!/usr/bin/env python3
import logging
import os
from argparse import ArgumentParser
from typing import List

from rdflib import Graph

from shaclgenerator.shaclgen_adapter import ShaclgenAdapter
from util import BackEnd
from shaclgenerator.shexer_adapter import ShexerAdapter

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('generate_shacl')


def main(
        input_file_path: str,
        output_directory_path: str,
        back_ends: List[BackEnd],
        target_classes: List[str]):

    logger.info(
        f'generate_shacl called with {input_file_path} and backend(s) '
        f'{", ".join(map(lambda b: b.value, back_ends))}'
    )

    if not os.path.exists(output_directory_path):
        os.mkdir(output_directory_path)

    if BackEnd.SHEXER in back_ends:
        shexer = ShexerAdapter(input_file_path, target_classes)

        shacl_result: Graph = shexer.generate_shacl()

        out_path = os.path.join(output_directory_path, 'shexer_result.ttl')
        shacl_result.serialize(destination=out_path, format='ttl')

    if BackEnd.SHACLGEN in back_ends:
        shacl_gen = ShaclgenAdapter(input_file_path)

        shacl_result: Graph = shacl_gen.generate_shacl()

        out_path = os.path.join(output_directory_path, 'shaclgen_result.ttl')
        shacl_result.serialize(destination=out_path, format='ttl')


if __name__ == '__main__':
    argument_parser = ArgumentParser()
    argument_parser.add_argument('input_file')

    # correspond to values of util.BackEnd enum
    argument_parser.add_argument('--shexer', action='store_true')
    argument_parser.add_argument('--shaclgen', action='store_true')

    argument_parser.add_argument(
        '--target_classes',
        type=str,
        action='store',
        help='Comma separated class URIs to generate shapes for.',
        required=True,
    )

    argument_parser.add_argument(
        '--shacl_output_directory',
        required=False,
        default='out/'
    )

    args = argument_parser.parse_args()

    input_file_path = args.input_file
    target_classes = args.target_classes.split(',')
    output_dir_path = args.shacl_output_directory

    back_ends = []
    if args.shexer:
        back_ends.append(BackEnd.SHEXER)
    if args.shaclgen:
        back_ends.append(BackEnd.SHACLGEN)

    if not back_ends:
        back_ends.append(BackEnd.SHEXER)
    
    main(input_file_path, output_dir_path, back_ends, target_classes)
